{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Strengthen Operational Security with IBM WebSphere Automation Last updated: January 2022 Duration: 45 mins Need support? Contact Kevin Postreich Introduction to WebSphere Automation IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume. Business Context You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team. Accessing and starting the environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window. Part1: Receiving vulnerability notifications Accessing the WebSphere Automation UI A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" Secure Connection Failed \" or \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cp-console.apps.demo.ibmdte.net/oidc/login.jsp#/homepage On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Select htpasswd as the login selection Enter ibmadmin as username and engageibm as password. And click Log In . The IBM Automation Welcome page appears. View the Application Runtimes that have been registered with IBM Automation a. Click on the Navigation Menu icon located at the upper left corner of the page b. Click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation The Application runtimes \u2013 Security page appears. There should be no data since there not any WebSphere / Liberty servers registered yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs. a. Select the Notifications menu item from the navigation list. b. Click on the Email addresses tab, to add your email address where notifications of new CVEs will be delivered The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click the Add buttton b. Enter your email address c. Click Save Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation. PART 2: Getting configuration parameters needed to register WebSphere / Liberty servers to IBM Automation Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters that will be used to register application servers. Return to the desktop and open a new terminal window. Login to the OpenShift Cluster using the oc CLI command shown below: oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret wsa-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.wsa-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. For more information: For additional details, view the section titled: Setting up security monitoring in the WebSphere Automation on-line documentation, or download it as a PDF from this URL: https://www.ibm.com/docs/en/ws-automation In the next section, you register your first server in WebSphere Automation. Part 3: Working with Traditional WebSphere servers with IBM Automation \u2013 Security Vulnerabilities You can view the security vulnerability status of each server in your inventory from the Security page in the WebSphere Automation UI. For each server, the numerical risk level in the range 0 - 10 represents the highest CVSS value of its CVEs. To set up security monitoring, add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. You can then track security vulnerabilities for your servers from a single user interface (UI) in WebSphere Automation. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. In Part 3 of the lab, you will perform the following task for WebSphere Traditional servers in IBM Automation. Register a WebSphere traditional application server (tWAS), version 9.0.5.7 to IBM Automation, using the URL, API Key, and usage Metering Certificate that you gathered in the previous section of the lab. Once registered, you will immediately see the list of all unresolved CVEs and applied IFixes for the server. Resolve the known Log4J vulnerabilities in the WebSphere traditional application server , by applying the appropriate IFix documented in the security bulletin for this vulnerability. Once the IFix is applied, IBM Automation immediately updates the security information for that application server, showing that the critical Log4J vulnerabilities have been patched. Optionally, remove the IFix from the WebSphere traditional application server. Once the IFix is removed. IBM Automation immediately updates the security vulnerability information for that application server, once again showing its unresolved CSVs for the Log4J vulnerabilities. 3.1 Register traditional WebSphere (tWAS) v9.0.5.7 In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.7 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Security -> Servers dashboard, and confirm that the tWAS v9.0.5.7 server was registered in IBM Automation. You should see that this server Risk Level is 10.0, with 14 or more unresolved CVEs. Note: Somewhere at the top of that list is the much talked about LOG4J vulnerability, known as CVE-2021-44228, with a critical score of 10. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing new vulnerabilities for the registered application server. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. 3.2 Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as CVE-2021-44228 . Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228 . Now, you will fix it by applying the appropriate iFix. Expand the list of unresolved CVEs. IBM Automation also detected the additional unresolved CVEs related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin. Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs ( CVE-2021-4104 and CVE-2021-45046 ) You can read the security bulletin here. You may be prompted to login using your IBM ID to access the content: https://www.ibm.com/support/pages/security-bulletin-multiple-vulnerabilities-apache-log4j-affect-ibm-websphere-application-server-and-ibm-websphere-application-server-liberty-cve-2021-4104-cve-2021-45046 Now, you will fix it by applying the appropriate iFix. (PH42762) First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: sudo /iFix/PH42762-LOG4J/imcl_ifix_install.sh 9057 When prompted for the password for the ibmadmin user, enter: engageibm! Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 were removed from the unresolved CVEs list for the tWAS 9.0.5.7 server. Also, you can see on the right under \u201cApplied iFixes\u201d the PH42762 fix is now listed as applied. 3.3 Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) You can remove the iFix that was applied to confirm that the CVE-2021-44228 shows up in the unresolved CVE list. Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: sudo /iFix/PH42762-LOG4J/imcl_ifix_uninstall.sh 9057 When prompted for the password for the ibmadmin user, enter: engageibm! Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 are once again listed as unresolved CVEs for the tWAS 9.0.5.7 server. Part 4: Working with WebSphere Liberty servers in IBM Automation Registering WebSphere Liberty servers with IBM automation requires that they also register to the usage metering service as WebSphere traditional application servers. While the requirement is the same, the process in which WebSphere Liberty servers register with the metering service is quite different than WebSphere traditional. In Part 4 of the lab, you will perform the following task for WebSphere Liberty servers with IBM Automation. Register a WebSphere Liberty to IBM Automation , using the URL, API Key, and usage Metering Certificate that you gathered in Part 2 of the lab. Once registered, you will immediately see the list of all unresolved CVEs and applied IFixes for the server. Resolve an identified vulnerabilities in the WebSphere Liberty server , by applying the appropriate IFix documented in the security bulletin for this vulnerability. Liberty servers on the distributed platform are not vulnerable to the well-known log4J vulnerabilities. However, you will resolve a critical vulnerability in the WebSphere Liberty server. Once the IFix is applied, IBM Automation immediately updates the security information for that Liberty application server, showing that the critical vulnerability has been patched. 4.1 Configuring Liberty server v20.0.0.9 In this section, you configure Liberty Server version 20.0.0.9 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: sudo \\cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml When prompted for the password for ibmuser, enter: engageibm! Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in part 2 of the lab, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201c gedit \u201d editor gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file. Using variables will make it easier to add the configuration to the Liberty server. echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/logs/messages.log The Liberty009 server is now successfully registered with IBM Automation, and should be displayed in the IBM Automation Dashboard under Application runtimes > Security - Servers. Go back to the browser, navigate to the Security -> Servers dashboard, and confirm that the Liberty_20009_server was registered in IBM Automation IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. The dashboard shows that this server is vulnerable for some unresolved CVEs. Click on the \u201c +6 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +6 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 Check your email that you registered with IBM automation for a notification of new vulnerability. 4.2 Update Liberty server v20.0.0.9 to fix the vulnerability In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability. Updating configurations Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration. Resolve the issue By Applying an iFix However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. Next, resolve the CVE by applying the recommended iFix (PH29942) documented in the security bulletin for this vulnerability. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. sudo /iFix/PH29942/imcl_ifix_install.sh 20009 When prompted for the password for ibmuser, enter: engageibm! Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Note that the IBM Automation dashboard shows the iFIX PH29942 has been applied to the Liberty_20009_server. Summary Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Hand-on Lab"},{"location":"#strengthen-operational-security-with-ibm-websphere-automation","text":"Last updated: January 2022 Duration: 45 mins Need support? Contact Kevin Postreich","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"#introduction-to-websphere-automation","text":"IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.","title":"Introduction to WebSphere Automation"},{"location":"#business-context","text":"You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.","title":"Business Context"},{"location":"#accessing-and-starting-the-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.","title":"Accessing and starting the environment"},{"location":"#part1-receiving-vulnerability-notifications","text":"","title":"Part1: Receiving vulnerability notifications"},{"location":"#accessing-the-websphere-automation-ui","text":"A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" Secure Connection Failed \" or \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cp-console.apps.demo.ibmdte.net/oidc/login.jsp#/homepage On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Select htpasswd as the login selection Enter ibmadmin as username and engageibm as password. And click Log In . The IBM Automation Welcome page appears. View the Application Runtimes that have been registered with IBM Automation a. Click on the Navigation Menu icon located at the upper left corner of the page b. Click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation The Application runtimes \u2013 Security page appears. There should be no data since there not any WebSphere / Liberty servers registered yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs. a. Select the Notifications menu item from the navigation list. b. Click on the Email addresses tab, to add your email address where notifications of new CVEs will be delivered The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click the Add buttton b. Enter your email address c. Click Save Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation.","title":"Accessing the WebSphere Automation UI"},{"location":"#part-2-getting-configuration-parameters-needed-to-register-websphere-liberty-servers-to-ibm-automation","text":"Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters that will be used to register application servers. Return to the desktop and open a new terminal window. Login to the OpenShift Cluster using the oc CLI command shown below: oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret wsa-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.wsa-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. For more information: For additional details, view the section titled: Setting up security monitoring in the WebSphere Automation on-line documentation, or download it as a PDF from this URL: https://www.ibm.com/docs/en/ws-automation In the next section, you register your first server in WebSphere Automation.","title":"PART 2: Getting configuration parameters needed to register WebSphere / Liberty servers to IBM Automation"},{"location":"#part-3-working-with-traditional-websphere-servers-with-ibm-automation-security-vulnerabilities","text":"You can view the security vulnerability status of each server in your inventory from the Security page in the WebSphere Automation UI. For each server, the numerical risk level in the range 0 - 10 represents the highest CVSS value of its CVEs. To set up security monitoring, add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. You can then track security vulnerabilities for your servers from a single user interface (UI) in WebSphere Automation. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. In Part 3 of the lab, you will perform the following task for WebSphere Traditional servers in IBM Automation. Register a WebSphere traditional application server (tWAS), version 9.0.5.7 to IBM Automation, using the URL, API Key, and usage Metering Certificate that you gathered in the previous section of the lab. Once registered, you will immediately see the list of all unresolved CVEs and applied IFixes for the server. Resolve the known Log4J vulnerabilities in the WebSphere traditional application server , by applying the appropriate IFix documented in the security bulletin for this vulnerability. Once the IFix is applied, IBM Automation immediately updates the security information for that application server, showing that the critical Log4J vulnerabilities have been patched. Optionally, remove the IFix from the WebSphere traditional application server. Once the IFix is removed. IBM Automation immediately updates the security vulnerability information for that application server, once again showing its unresolved CSVs for the Log4J vulnerabilities.","title":"Part 3: Working with Traditional WebSphere servers with IBM Automation \u2013 Security Vulnerabilities"},{"location":"#31-register-traditional-websphere-twas-v9057","text":"In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.7 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Security -> Servers dashboard, and confirm that the tWAS v9.0.5.7 server was registered in IBM Automation. You should see that this server Risk Level is 10.0, with 14 or more unresolved CVEs. Note: Somewhere at the top of that list is the much talked about LOG4J vulnerability, known as CVE-2021-44228, with a critical score of 10. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing new vulnerabilities for the registered application server. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work.","title":"3.1 Register traditional WebSphere (tWAS) v9.0.5.7"},{"location":"#32-update-twas-server-v9057-to-fix-the-log4j-vulnerability","text":"In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as CVE-2021-44228 . Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228 . Now, you will fix it by applying the appropriate iFix. Expand the list of unresolved CVEs. IBM Automation also detected the additional unresolved CVEs related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin. Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs ( CVE-2021-4104 and CVE-2021-45046 ) You can read the security bulletin here. You may be prompted to login using your IBM ID to access the content: https://www.ibm.com/support/pages/security-bulletin-multiple-vulnerabilities-apache-log4j-affect-ibm-websphere-application-server-and-ibm-websphere-application-server-liberty-cve-2021-4104-cve-2021-45046 Now, you will fix it by applying the appropriate iFix. (PH42762) First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: sudo /iFix/PH42762-LOG4J/imcl_ifix_install.sh 9057 When prompted for the password for the ibmadmin user, enter: engageibm! Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 were removed from the unresolved CVEs list for the tWAS 9.0.5.7 server. Also, you can see on the right under \u201cApplied iFixes\u201d the PH42762 fix is now listed as applied.","title":"3.2 Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability"},{"location":"#33-update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","text":"You can remove the iFix that was applied to confirm that the CVE-2021-44228 shows up in the unresolved CVE list. Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: sudo /iFix/PH42762-LOG4J/imcl_ifix_uninstall.sh 9057 When prompted for the password for the ibmadmin user, enter: engageibm! Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 are once again listed as unresolved CVEs for the tWAS 9.0.5.7 server.","title":"3.3 Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)"},{"location":"#part-4-working-with-websphere-liberty-servers-in-ibm-automation","text":"Registering WebSphere Liberty servers with IBM automation requires that they also register to the usage metering service as WebSphere traditional application servers. While the requirement is the same, the process in which WebSphere Liberty servers register with the metering service is quite different than WebSphere traditional. In Part 4 of the lab, you will perform the following task for WebSphere Liberty servers with IBM Automation. Register a WebSphere Liberty to IBM Automation , using the URL, API Key, and usage Metering Certificate that you gathered in Part 2 of the lab. Once registered, you will immediately see the list of all unresolved CVEs and applied IFixes for the server. Resolve an identified vulnerabilities in the WebSphere Liberty server , by applying the appropriate IFix documented in the security bulletin for this vulnerability. Liberty servers on the distributed platform are not vulnerable to the well-known log4J vulnerabilities. However, you will resolve a critical vulnerability in the WebSphere Liberty server. Once the IFix is applied, IBM Automation immediately updates the security information for that Liberty application server, showing that the critical vulnerability has been patched.","title":"Part 4: Working with WebSphere Liberty servers in IBM Automation"},{"location":"#41-configuring-liberty-server-v20009","text":"In this section, you configure Liberty Server version 20.0.0.9 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: sudo \\cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml When prompted for the password for ibmuser, enter: engageibm! Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in part 2 of the lab, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201c gedit \u201d editor gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file. Using variables will make it easier to add the configuration to the Liberty server. echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/logs/messages.log The Liberty009 server is now successfully registered with IBM Automation, and should be displayed in the IBM Automation Dashboard under Application runtimes > Security - Servers. Go back to the browser, navigate to the Security -> Servers dashboard, and confirm that the Liberty_20009_server was registered in IBM Automation IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. The dashboard shows that this server is vulnerable for some unresolved CVEs. Click on the \u201c +6 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +6 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 Check your email that you registered with IBM automation for a notification of new vulnerability.","title":"4.1 Configuring Liberty server v20.0.0.9"},{"location":"#42-update-liberty-server-v20009-to-fix-the-vulnerability","text":"In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.","title":"4.2 Update Liberty server v20.0.0.9 to fix the vulnerability"},{"location":"#updating-configurations","text":"Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration.","title":"Updating configurations"},{"location":"#resolve-the-issue-by-applying-an-ifix","text":"However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. Next, resolve the CVE by applying the recommended iFix (PH29942) documented in the security bulletin for this vulnerability. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. sudo /iFix/PH29942/imcl_ifix_install.sh 20009 When prompted for the password for ibmuser, enter: engageibm! Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Note that the IBM Automation dashboard shows the iFIX PH29942 has been applied to the Liberty_20009_server.","title":"Resolve the issue By Applying an iFix"},{"location":"#summary","text":"Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Summary"},{"location":"conf/","text":"Conference Event Link When: March 16\u201319, 2020 Where: Renaissance Hotel Dallas 2222 North Stemmons Freeway Dallas, TX 75207 Starts: Mar 16, 2020 1:00 PM (CT) Ends: Mar 19, 2020 5:30 PM (CT)","title":"Conf"},{"location":"intro/","text":"Getting started with IBM WebSphere Automation Announcing IBM WebSphere Automation Marketing - ibm.com Blog: Announcing IBM WebSphere Automation Introducing IBM WebSphere Automation In this short video, you will get a high-level introduction to IBM WebSphere Automation and its capabilities. In this video, you will see a short demonstration of how WebSphere Automation enhances the security posture of your existing WebSphere estate. 15 minutes The Value of IBM WebSphere Automation In this webinar, you will learn about the value proposition and use cases for IBM WebSphere Automation. You will get a glimpse into the strategy, vision, and roadmap of this exciting new product designed to provide immediate value to existing WebSphere Application Server customers. 30 minutes Demonstration: Security Vulnerability automation with IBM WebSphere Automation See for yourself how using IBM WebSphere Automation provides immediate value to WebSphere Administrators and security compliance team responsible for large WebSphere Application Server estates. This demo covers the self-securing capabilities available in IBM WebSphere Automation 2Q 2021 release, with particular emphasis on the observability and automation of the security posture of the WebSphere estate. The demo showcases the user experience, automated recognition of relevant CVEs for registered servers, and automated tracking of new security vulnerabilities, and the impacts to the registered servers. 12 minutes","title":"Getting started with IBM WebSphere Automation"},{"location":"intro/#getting-started-with-ibm-websphere-automation","text":"","title":"Getting started with IBM WebSphere Automation"},{"location":"intro/#announcing-ibm-websphere-automation","text":"Marketing - ibm.com Blog: Announcing IBM WebSphere Automation","title":"Announcing IBM WebSphere Automation"},{"location":"intro/#introducing-ibm-websphere-automation","text":"In this short video, you will get a high-level introduction to IBM WebSphere Automation and its capabilities. In this video, you will see a short demonstration of how WebSphere Automation enhances the security posture of your existing WebSphere estate. 15 minutes","title":"Introducing IBM WebSphere Automation"},{"location":"intro/#the-value-of-ibm-websphere-automation","text":"In this webinar, you will learn about the value proposition and use cases for IBM WebSphere Automation. You will get a glimpse into the strategy, vision, and roadmap of this exciting new product designed to provide immediate value to existing WebSphere Application Server customers. 30 minutes","title":"The Value of IBM WebSphere Automation"},{"location":"intro/#demonstration-security-vulnerability-automation-with-ibm-websphere-automation","text":"See for yourself how using IBM WebSphere Automation provides immediate value to WebSphere Administrators and security compliance team responsible for large WebSphere Application Server estates. This demo covers the self-securing capabilities available in IBM WebSphere Automation 2Q 2021 release, with particular emphasis on the observability and automation of the security posture of the WebSphere estate. The demo showcases the user experience, automated recognition of relevant CVEs for registered servers, and automated tracking of new security vulnerabilities, and the impacts to the registered servers. 12 minutes","title":"Demonstration: Security Vulnerability automation with IBM WebSphere Automation"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/","text":"Strengthen Operational Security with IBM WebSphere Automation Author(s): Tien-Thanh Le, Ajay Reddy, Brian Hanczaryk, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: July 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich Introduction to WebSphere Automation IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume. Business Context You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team. Accessing and starting the environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window. Receiving vulnerability notifications Accessing the WebSphere Automation UI A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation. Getting configuration parameters Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation. Configuring Liberty Server v20.0.0.12 In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter \" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server 4. Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, navigate to the Servers tab, to view the list of registered servers. The new Liberty server should be registered a. Confirm that the Liberty server is registered in the WebSphere Automation Application runtimes page, as illustrated below. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Configuring Liberty Server v20.0.0.9 In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. Configuring traditional WebSphere (tWAS) v9.0.5.6 In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Servers dashboard, and confirm that the tWAS v9.0.5.6 server was registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability. Configuring traditional WebSphere (tWAS) v9.0.5.7 In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability. Update Liberty server v20.0.0.9 to fix the vulnerability In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability. Updating configurations Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration. Resolve the issue By Applying an iFix However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Update tWAS server v9.0.5.7 to fix the vulnerability In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes. Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server: Summary Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#strengthen-operational-security-with-ibm-websphere-automation","text":"Author(s): Tien-Thanh Le, Ajay Reddy, Brian Hanczaryk, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: July 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#introduction-to-websphere-automation","text":"IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.","title":"Introduction to WebSphere Automation"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#business-context","text":"You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.","title":"Business Context"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#accessing-and-starting-the-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.","title":"Accessing and starting the environment"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#receiving-vulnerability-notifications","text":"","title":"Receiving vulnerability notifications"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#accessing-the-websphere-automation-ui","text":"A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation.","title":"Accessing the WebSphere Automation UI"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#getting-configuration-parameters","text":"Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation.","title":"Getting configuration parameters"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#configuring-liberty-server-v200012","text":"In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter \" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server 4. Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, navigate to the Servers tab, to view the list of registered servers. The new Liberty server should be registered a. Confirm that the Liberty server is registered in the WebSphere Automation Application runtimes page, as illustrated below. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated.","title":"Configuring Liberty Server v20.0.0.12"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#configuring-liberty-server-v20009","text":"In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work.","title":"Configuring Liberty Server v20.0.0.9"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#configuring-traditional-websphere-twas-v9056","text":"In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Servers dashboard, and confirm that the tWAS v9.0.5.6 server was registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.6"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#configuring-traditional-websphere-twas-v9057","text":"In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.7"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#update-liberty-server-v20009-to-fix-the-vulnerability","text":"In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.","title":"Update Liberty server v20.0.0.9 to fix the vulnerability"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#updating-configurations","text":"Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration.","title":"Updating configurations"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#resolve-the-issue-by-applying-an-ifix","text":"However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.","title":"Resolve the issue By Applying an iFix"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#update-twas-server-v9057-to-fix-the-vulnerability","text":"In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes.","title":"Update tWAS server v9.0.5.7 to fix the vulnerability"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","text":"You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)"},{"location":"lab1-v1.6-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#summary","text":"Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Summary"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/","text":"Strengthen Operational Security with IBM WebSphere Automation Author(s): Tien-Thanh Le, Ajay Reddy, Brian Hanczaryk, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: July 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich Introduction to WebSphere Automation IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume. Business Context You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team. Accessing and starting the environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window. Receiving vulnerability notifications Accessing the WebSphere Automation UI A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation. Getting configuration parameters Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation. Configuring Liberty Server v20.0.0.12 In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter \" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server 4. Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, navigate to the Servers tab, to view the list of registered servers. The new Liberty server should be registered a. Confirm that the Liberty server is registered in the WebSphere Automation Application runtimes page, as illustrated below. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Configuring Liberty Server v20.0.0.9 In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. Configuring traditional WebSphere (tWAS) v9.0.5.6 In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Servers dashboard, and confirm that the tWAS v9.0.5.6 server was registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability. Configuring traditional WebSphere (tWAS) v9.0.5.7 In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability. Update Liberty server v20.0.0.9 to fix the vulnerability In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability. Updating configurations Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration. Resolve the issue By Applying an iFix However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Update tWAS server v9.0.5.7 to fix the vulnerability In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes. Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server: Summary Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation . Appendix 1: Reserve an environment for the lab IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button. The lab environment Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#strengthen-operational-security-with-ibm-websphere-automation","text":"Author(s): Tien-Thanh Le, Ajay Reddy, Brian Hanczaryk, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: July 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#introduction-to-websphere-automation","text":"IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.","title":"Introduction to WebSphere Automation"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#business-context","text":"You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.","title":"Business Context"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#accessing-and-starting-the-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.","title":"Accessing and starting the environment"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#receiving-vulnerability-notifications","text":"","title":"Receiving vulnerability notifications"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#accessing-the-websphere-automation-ui","text":"A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation.","title":"Accessing the WebSphere Automation UI"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#getting-configuration-parameters","text":"Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation.","title":"Getting configuration parameters"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#configuring-liberty-server-v200012","text":"In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter \" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server 4. Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, navigate to the Servers tab, to view the list of registered servers. The new Liberty server should be registered a. Confirm that the Liberty server is registered in the WebSphere Automation Application runtimes page, as illustrated below. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated.","title":"Configuring Liberty Server v20.0.0.12"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#configuring-liberty-server-v20009","text":"In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work.","title":"Configuring Liberty Server v20.0.0.9"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#configuring-traditional-websphere-twas-v9056","text":"In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Servers dashboard, and confirm that the tWAS v9.0.5.6 server was registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.6"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#configuring-traditional-websphere-twas-v9057","text":"In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.7"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#update-liberty-server-v20009-to-fix-the-vulnerability","text":"In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.","title":"Update Liberty server v20.0.0.9 to fix the vulnerability"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#updating-configurations","text":"Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration.","title":"Updating configurations"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#resolve-the-issue-by-applying-an-ifix","text":"However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.","title":"Resolve the issue By Applying an iFix"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#update-twas-server-v9057-to-fix-the-vulnerability","text":"In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes.","title":"Update tWAS server v9.0.5.7 to fix the vulnerability"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","text":"You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#summary","text":"Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Summary"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#appendix-1-reserve-an-environment-for-the-lab","text":"IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button.","title":"Appendix 1: Reserve an environment for the lab"},{"location":"lab1-v1.7-was-automation-tgf-NOAPPENDIX-RESERVE ENV/#the-lab-environment","text":"Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"The lab environment"},{"location":"lab1_v1.2-was-automation-Toc-tgf/","text":"Strengthen Operational Security with IBM WebSphere Automation Author(s): Tien-Thanh Le, Ajay Apte, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: June 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich Contents Strengthen Operational Security with IBM WebSphere Automation 1 Introduction to WebSphere Automation 3 Business Context 4 Accessing and starting the environment 6 Receiving vulnerability notifications 9 Accessing the WebSphere Automation UI 9 Getting configuration parameters 14 Configuring Liberty server v20.0.0.12 18 Configuring Liberty server v20.0.0.9 24 Configuring traditional WebSphere (tWAS) v9.0.5.6 27 Configuring traditional WebSphere (tWAS) v9.0.5.7 29 Update Liberty server v20.0.0.9 to fix the vulnerability 31 Updating configurations 31 Resolve the issue By Applying an IFIX 32 Update tWAS server v9.0.5.7 to fix the vulnerability 35 Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) 37 Summary 38 Appendix 1: Reserve an environment for the lab 39 The lab environment 42 Introduction to WebSphere Automation IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume. Business Context You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. This is a very manual process and you are trying to automate it. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team. Accessing and starting the environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment, Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window. Receiving vulnerability notifications Accessing the WebSphere Automation UI A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no webSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation. Getting configuration parameters Add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation. Configuring Liberty Server v20.0.0.12 In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature\\> c. In the server,xml file, add the usageMetering element below: <usageMetering url=\"<metering-url>\" apiKey=\"<api-key>\" sslRef=\"defaultSSL\"\\> d. You need to replace the \\< metering-url > with the output of the following command. Open another terminal window, and run the cat command below: cat /opt/IBM/WebSphere/metering-url.txt e. Replace \\<api-key> above with the output of the following cat command. Use the second terminal to run the cat command: cat /opt/IBM/WebSphere/api-key.txt Save and Close the server.xml file. In the WebSphere Automation UI, list the new Liberty server that was registered. a. Back to the WebSphere Automation Dashboard on your browser, open the Servers view b. Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file has not been configured correctly. Review the server,xml configuration. Ensure the usageMetering-1.0 feature is included in the list of features. Ensure the usageMetering url is CORRECT. No additional characters or spaces. Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. Ensure the usageMetering parameters that you modified are surrounded by double-quotes. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Maybe your server vulnerability is a little bit different than illustrated above. That is a possibility, since new vulnerabilities are constantly discovered. Configuring Liberty Server v20.0.0.9 In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. Configuring traditional WeebSphere (tWAS) v9.0.5.6 In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability. Configuring traditional WebSphere (tWAS) v9.0.5.7 In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability. Update Liberty server v20.0.0.9 to fix the vulnerability In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability. Updating configurations Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --\\> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration. Resolve the issue By Applying an IFIX However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFIx can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Update tWAS server v9.0.5.7 to fix the vulnerability In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFIX installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes. Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server: Summary Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation . Appendix 1: Reserve an environment for the lab IMPORTANT! Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button. The lab environment Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"lab1 v1.2 was automation Toc tgf"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#contents","text":"Strengthen Operational Security with IBM WebSphere Automation 1 Introduction to WebSphere Automation 3 Business Context 4 Accessing and starting the environment 6 Receiving vulnerability notifications 9 Accessing the WebSphere Automation UI 9 Getting configuration parameters 14 Configuring Liberty server v20.0.0.12 18 Configuring Liberty server v20.0.0.9 24 Configuring traditional WebSphere (tWAS) v9.0.5.6 27 Configuring traditional WebSphere (tWAS) v9.0.5.7 29 Update Liberty server v20.0.0.9 to fix the vulnerability 31 Updating configurations 31 Resolve the issue By Applying an IFIX 32 Update tWAS server v9.0.5.7 to fix the vulnerability 35 Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) 37 Summary 38 Appendix 1: Reserve an environment for the lab 39 The lab environment 42","title":"Contents"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#introduction-to-websphere-automation","text":"IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.","title":"Introduction to WebSphere Automation"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#business-context","text":"You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. This is a very manual process and you are trying to automate it. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.","title":"Business Context"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#accessing-and-starting-the-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment, Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.","title":"Accessing and starting the environment"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#receiving-vulnerability-notifications","text":"","title":"Receiving vulnerability notifications"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#accessing-the-websphere-automation-ui","text":"A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no webSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation.","title":"Accessing the WebSphere Automation UI"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#getting-configuration-parameters","text":"Add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation.","title":"Getting configuration parameters"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#configuring-liberty-server-v200012","text":"In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature\\> c. In the server,xml file, add the usageMetering element below: <usageMetering url=\"<metering-url>\" apiKey=\"<api-key>\" sslRef=\"defaultSSL\"\\> d. You need to replace the \\< metering-url > with the output of the following command. Open another terminal window, and run the cat command below: cat /opt/IBM/WebSphere/metering-url.txt e. Replace \\<api-key> above with the output of the following cat command. Use the second terminal to run the cat command: cat /opt/IBM/WebSphere/api-key.txt Save and Close the server.xml file. In the WebSphere Automation UI, list the new Liberty server that was registered. a. Back to the WebSphere Automation Dashboard on your browser, open the Servers view b. Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file has not been configured correctly. Review the server,xml configuration. Ensure the usageMetering-1.0 feature is included in the list of features. Ensure the usageMetering url is CORRECT. No additional characters or spaces. Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. Ensure the usageMetering parameters that you modified are surrounded by double-quotes. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Maybe your server vulnerability is a little bit different than illustrated above. That is a possibility, since new vulnerabilities are constantly discovered.","title":"Configuring Liberty Server v20.0.0.12"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#configuring-liberty-server-v20009","text":"In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work.","title":"Configuring Liberty Server v20.0.0.9"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#configuring-traditional-weebsphere-twas-v9056","text":"In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WeebSphere (tWAS) v9.0.5.6"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#configuring-traditional-websphere-twas-v9057","text":"In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.7"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#update-liberty-server-v20009-to-fix-the-vulnerability","text":"In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.","title":"Update Liberty server v20.0.0.9 to fix the vulnerability"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#updating-configurations","text":"Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --\\> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration.","title":"Updating configurations"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#resolve-the-issue-by-applying-an-ifix","text":"However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFIx can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.","title":"Resolve the issue By Applying an IFIX"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#update-twas-server-v9057-to-fix-the-vulnerability","text":"In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFIX installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes.","title":"Update tWAS server v9.0.5.7 to fix the vulnerability"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","text":"You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#summary","text":"Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Summary"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#appendix-1-reserve-an-environment-for-the-lab","text":"IMPORTANT! Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button.","title":"Appendix 1: Reserve an environment for the lab"},{"location":"lab1_v1.2-was-automation-Toc-tgf/#the-lab-environment","text":"Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"The lab environment"},{"location":"lab1_v1.2-was-automation-tgf/","text":"Strengthen Operational Security with IBM WebSphere Automation Author(s): Tien-Thanh Le, Ajay Apte, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: June 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich Introduction to WebSphere Automation IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume. Business Context You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. This is a very manual process and you are trying to automate it. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team. Accessing and starting the environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment, Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window. Receiving vulnerability notifications Accessing the WebSphere Automation UI A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no webSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation. Getting configuration parameters Add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation. Configuring Liberty Server v20.0.0.12 In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature\\> c. In the server,xml file, add the usageMetering element below: <usageMetering url=\"<metering-url>\" apiKey=\"<api-key>\" sslRef=\"defaultSSL\"\\> d. You need to replace the \\< metering-url > with the output of the following command. Open another terminal window, and run the cat command below: cat /opt/IBM/WebSphere/metering-url.txt e. Replace \\<api-key> above with the output of the following cat command. Use the second terminal to run the cat command: cat /opt/IBM/WebSphere/api-key.txt Save and Close the server.xml file. In the WebSphere Automation UI, list the new Liberty server that was registered. a. Back to the WebSphere Automation Dashboard on your browser, open the Servers view b. Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file has not been configured correctly. Review the server,xml configuration. Ensure the usageMetering-1.0 feature is included in the list of features. Ensure the usageMetering url is CORRECT. No additional characters or spaces. Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. Ensure the usageMetering parameters that you modified are surrounded by double-quotes. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Maybe your server vulnerability is a little bit different than illustrated above. That is a possibility, since new vulnerabilities are constantly discovered. Configuring Liberty Server v20.0.0.9 In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. Configuring traditional WeebSphere (tWAS) v9.0.5.6 In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability. Configuring traditional WebSphere (tWAS) v9.0.5.7 In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability. Update Liberty server v20.0.0.9 to fix the vulnerability In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability. Updating configurations Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --\\> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration. Resolve the issue By Applying an IFIX However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFIx can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Update tWAS server v9.0.5.7 to fix the vulnerability In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFIX installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes. Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server: Summary Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation . Appendix 1: Reserve an environment for the lab IMPORTANT! Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button. The lab environment Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"Lab1 v1.2 was automation tgf"},{"location":"lab1_v1.2-was-automation-tgf/#introduction-to-websphere-automation","text":"IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.","title":"Introduction to WebSphere Automation"},{"location":"lab1_v1.2-was-automation-tgf/#business-context","text":"You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. This is a very manual process and you are trying to automate it. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.","title":"Business Context"},{"location":"lab1_v1.2-was-automation-tgf/#accessing-and-starting-the-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment, Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.","title":"Accessing and starting the environment"},{"location":"lab1_v1.2-was-automation-tgf/#receiving-vulnerability-notifications","text":"","title":"Receiving vulnerability notifications"},{"location":"lab1_v1.2-was-automation-tgf/#accessing-the-websphere-automation-ui","text":"A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no webSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation.","title":"Accessing the WebSphere Automation UI"},{"location":"lab1_v1.2-was-automation-tgf/#getting-configuration-parameters","text":"Add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation.","title":"Getting configuration parameters"},{"location":"lab1_v1.2-was-automation-tgf/#configuring-liberty-server-v200012","text":"In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature\\> c. In the server,xml file, add the usageMetering element below: <usageMetering url=\"<metering-url>\" apiKey=\"<api-key>\" sslRef=\"defaultSSL\"\\> d. You need to replace the \\< metering-url > with the output of the following command. Open another terminal window, and run the cat command below: cat /opt/IBM/WebSphere/metering-url.txt e. Replace \\<api-key> above with the output of the following cat command. Use the second terminal to run the cat command: cat /opt/IBM/WebSphere/api-key.txt Save and Close the server.xml file. In the WebSphere Automation UI, list the new Liberty server that was registered. a. Back to the WebSphere Automation Dashboard on your browser, open the Servers view b. Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file has not been configured correctly. Review the server,xml configuration. Ensure the usageMetering-1.0 feature is included in the list of features. Ensure the usageMetering url is CORRECT. No additional characters or spaces. Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. Ensure the usageMetering parameters that you modified are surrounded by double-quotes. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Maybe your server vulnerability is a little bit different than illustrated above. That is a possibility, since new vulnerabilities are constantly discovered.","title":"Configuring Liberty Server v20.0.0.12"},{"location":"lab1_v1.2-was-automation-tgf/#configuring-liberty-server-v20009","text":"In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work.","title":"Configuring Liberty Server v20.0.0.9"},{"location":"lab1_v1.2-was-automation-tgf/#configuring-traditional-weebsphere-twas-v9056","text":"In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WeebSphere (tWAS) v9.0.5.6"},{"location":"lab1_v1.2-was-automation-tgf/#configuring-traditional-websphere-twas-v9057","text":"In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.7"},{"location":"lab1_v1.2-was-automation-tgf/#update-liberty-server-v20009-to-fix-the-vulnerability","text":"In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.","title":"Update Liberty server v20.0.0.9 to fix the vulnerability"},{"location":"lab1_v1.2-was-automation-tgf/#updating-configurations","text":"Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --\\> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration.","title":"Updating configurations"},{"location":"lab1_v1.2-was-automation-tgf/#resolve-the-issue-by-applying-an-ifix","text":"However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFIx can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.","title":"Resolve the issue By Applying an IFIX"},{"location":"lab1_v1.2-was-automation-tgf/#update-twas-server-v9057-to-fix-the-vulnerability","text":"In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFIX installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes.","title":"Update tWAS server v9.0.5.7 to fix the vulnerability"},{"location":"lab1_v1.2-was-automation-tgf/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","text":"You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)"},{"location":"lab1_v1.2-was-automation-tgf/#summary","text":"Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Summary"},{"location":"lab1_v1.2-was-automation-tgf/#appendix-1-reserve-an-environment-for-the-lab","text":"IMPORTANT! Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button.","title":"Appendix 1: Reserve an environment for the lab"},{"location":"lab1_v1.2-was-automation-tgf/#the-lab-environment","text":"Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"The lab environment"},{"location":"lab1_v1.3-was-automation-tgf/","text":"Strengthen Operational Security with IBM WebSphere Automation Author(s): Tien-Thanh Le, Ajay Apte, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: June 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich Introduction to WebSphere Automation IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume. Business Context You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. This is a very manual process and you are trying to automate it. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team. Accessing and starting the environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment, Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window. Receiving vulnerability notifications Accessing the WebSphere Automation UI A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter an error accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no webSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation. Getting configuration parameters Add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation. Configuring Liberty Server v20.0.0.12 In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"<metering-url>\" apiKey=\"<api-key>\" sslRef=\"defaultSSL\"/> d. You need to replace the \\< metering-url > with the output of the following command. Open another terminal window, and run the cat command below: cat /opt/IBM/WebSphere/metering-url.txt e. Replace \\<api-key> above with the output of the following cat command. Use the second terminal to run the cat command: cat /opt/IBM/WebSphere/api-key.txt Save and Close the server.xml file. In the WebSphere Automation UI, list the new Liberty server that was registered. a. Back to the WebSphere Automation Dashboard on your browser, open the Servers view b. Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file has not been configured correctly. - Review the server,xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. - Ensure the usageMetering parameters that you modified are surrounded by double-quotes . If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Configuring Liberty Server v20.0.0.9 In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Infromation: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. Configuring traditional WeebSphere (tWAS) v9.0.5.6 In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability. Configuring traditional WebSphere (tWAS) v9.0.5.7 In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability. Update Liberty server v20.0.0.9 to fix the vulnerability In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability. Updating configurations Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration. Resolve the issue By Applying an IFIX However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFIx can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Update tWAS server v9.0.5.7 to fix the vulnerability In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFIX installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes. Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server: Summary Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation . Appendix 1: Reserve an environment for the lab IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button. The lab environment Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1_v1.3-was-automation-tgf/#strengthen-operational-security-with-ibm-websphere-automation","text":"Author(s): Tien-Thanh Le, Ajay Apte, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: June 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1_v1.3-was-automation-tgf/#introduction-to-websphere-automation","text":"IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.","title":"Introduction to WebSphere Automation"},{"location":"lab1_v1.3-was-automation-tgf/#business-context","text":"You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. This is a very manual process and you are trying to automate it. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.","title":"Business Context"},{"location":"lab1_v1.3-was-automation-tgf/#accessing-and-starting-the-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment, Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.","title":"Accessing and starting the environment"},{"location":"lab1_v1.3-was-automation-tgf/#receiving-vulnerability-notifications","text":"","title":"Receiving vulnerability notifications"},{"location":"lab1_v1.3-was-automation-tgf/#accessing-the-websphere-automation-ui","text":"A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter an error accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no webSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation.","title":"Accessing the WebSphere Automation UI"},{"location":"lab1_v1.3-was-automation-tgf/#getting-configuration-parameters","text":"Add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation.","title":"Getting configuration parameters"},{"location":"lab1_v1.3-was-automation-tgf/#configuring-liberty-server-v200012","text":"In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"<metering-url>\" apiKey=\"<api-key>\" sslRef=\"defaultSSL\"/> d. You need to replace the \\< metering-url > with the output of the following command. Open another terminal window, and run the cat command below: cat /opt/IBM/WebSphere/metering-url.txt e. Replace \\<api-key> above with the output of the following cat command. Use the second terminal to run the cat command: cat /opt/IBM/WebSphere/api-key.txt Save and Close the server.xml file. In the WebSphere Automation UI, list the new Liberty server that was registered. a. Back to the WebSphere Automation Dashboard on your browser, open the Servers view b. Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file has not been configured correctly. - Review the server,xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. - Ensure the usageMetering parameters that you modified are surrounded by double-quotes . If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated.","title":"Configuring Liberty Server v20.0.0.12"},{"location":"lab1_v1.3-was-automation-tgf/#configuring-liberty-server-v20009","text":"In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Infromation: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work.","title":"Configuring Liberty Server v20.0.0.9"},{"location":"lab1_v1.3-was-automation-tgf/#configuring-traditional-weebsphere-twas-v9056","text":"In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WeebSphere (tWAS) v9.0.5.6"},{"location":"lab1_v1.3-was-automation-tgf/#configuring-traditional-websphere-twas-v9057","text":"In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.7"},{"location":"lab1_v1.3-was-automation-tgf/#update-liberty-server-v20009-to-fix-the-vulnerability","text":"In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.","title":"Update Liberty server v20.0.0.9 to fix the vulnerability"},{"location":"lab1_v1.3-was-automation-tgf/#updating-configurations","text":"Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration.","title":"Updating configurations"},{"location":"lab1_v1.3-was-automation-tgf/#resolve-the-issue-by-applying-an-ifix","text":"However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFIx can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.","title":"Resolve the issue By Applying an IFIX"},{"location":"lab1_v1.3-was-automation-tgf/#update-twas-server-v9057-to-fix-the-vulnerability","text":"In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFIX installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes.","title":"Update tWAS server v9.0.5.7 to fix the vulnerability"},{"location":"lab1_v1.3-was-automation-tgf/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","text":"You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)"},{"location":"lab1_v1.3-was-automation-tgf/#summary","text":"Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Summary"},{"location":"lab1_v1.3-was-automation-tgf/#appendix-1-reserve-an-environment-for-the-lab","text":"IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button.","title":"Appendix 1: Reserve an environment for the lab"},{"location":"lab1_v1.3-was-automation-tgf/#the-lab-environment","text":"Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"The lab environment"},{"location":"lab1_v1.4-was-automation-tgf/","text":"Strengthen Operational Security with IBM WebSphere Automation Author(s): Tien-Thanh Le, Ajay Apte, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: June 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich Introduction to WebSphere Automation IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume. Business Context You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. This is a very manual process and you are trying to automate it. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team. Accessing and starting the environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment, Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window. Receiving vulnerability notifications Accessing the WebSphere Automation UI A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no webSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation. Getting configuration parameters Add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation. Configuring Liberty Server v20.0.0.12 In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, list the new Liberty server that was registered. a. Back to the WebSphere Automation Dashboard on your browser, open the Servers view b. Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file has not been configured correctly. - Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. - Ensure the usageMetering parameters that you modified are surrounded by double-quotes . If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Configuring Liberty Server v20.0.0.9 In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Infromation: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. Configuring traditional WeebSphere (tWAS) v9.0.5.6 In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability. Configuring traditional WebSphere (tWAS) v9.0.5.7 In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability. Update Liberty server v20.0.0.9 to fix the vulnerability In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability. Updating configurations Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration. Resolve the issue By Applying an IFIX However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFIx can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Update tWAS server v9.0.5.7 to fix the vulnerability In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFIX installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes. Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server: Summary Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation . Appendix 1: Reserve an environment for the lab IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button. The lab environment Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1_v1.4-was-automation-tgf/#strengthen-operational-security-with-ibm-websphere-automation","text":"Author(s): Tien-Thanh Le, Ajay Apte, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: June 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1_v1.4-was-automation-tgf/#introduction-to-websphere-automation","text":"IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.","title":"Introduction to WebSphere Automation"},{"location":"lab1_v1.4-was-automation-tgf/#business-context","text":"You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. This is a very manual process and you are trying to automate it. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.","title":"Business Context"},{"location":"lab1_v1.4-was-automation-tgf/#accessing-and-starting-the-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment, Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.","title":"Accessing and starting the environment"},{"location":"lab1_v1.4-was-automation-tgf/#receiving-vulnerability-notifications","text":"","title":"Receiving vulnerability notifications"},{"location":"lab1_v1.4-was-automation-tgf/#accessing-the-websphere-automation-ui","text":"A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no webSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation.","title":"Accessing the WebSphere Automation UI"},{"location":"lab1_v1.4-was-automation-tgf/#getting-configuration-parameters","text":"Add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation.","title":"Getting configuration parameters"},{"location":"lab1_v1.4-was-automation-tgf/#configuring-liberty-server-v200012","text":"In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, list the new Liberty server that was registered. a. Back to the WebSphere Automation Dashboard on your browser, open the Servers view b. Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file has not been configured correctly. - Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. - Ensure the usageMetering parameters that you modified are surrounded by double-quotes . If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated.","title":"Configuring Liberty Server v20.0.0.12"},{"location":"lab1_v1.4-was-automation-tgf/#configuring-liberty-server-v20009","text":"In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Infromation: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work.","title":"Configuring Liberty Server v20.0.0.9"},{"location":"lab1_v1.4-was-automation-tgf/#configuring-traditional-weebsphere-twas-v9056","text":"In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WeebSphere (tWAS) v9.0.5.6"},{"location":"lab1_v1.4-was-automation-tgf/#configuring-traditional-websphere-twas-v9057","text":"In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.7"},{"location":"lab1_v1.4-was-automation-tgf/#update-liberty-server-v20009-to-fix-the-vulnerability","text":"In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.","title":"Update Liberty server v20.0.0.9 to fix the vulnerability"},{"location":"lab1_v1.4-was-automation-tgf/#updating-configurations","text":"Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration.","title":"Updating configurations"},{"location":"lab1_v1.4-was-automation-tgf/#resolve-the-issue-by-applying-an-ifix","text":"However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFIx can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.","title":"Resolve the issue By Applying an IFIX"},{"location":"lab1_v1.4-was-automation-tgf/#update-twas-server-v9057-to-fix-the-vulnerability","text":"In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFIX installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes.","title":"Update tWAS server v9.0.5.7 to fix the vulnerability"},{"location":"lab1_v1.4-was-automation-tgf/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","text":"You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)"},{"location":"lab1_v1.4-was-automation-tgf/#summary","text":"Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Summary"},{"location":"lab1_v1.4-was-automation-tgf/#appendix-1-reserve-an-environment-for-the-lab","text":"IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button.","title":"Appendix 1: Reserve an environment for the lab"},{"location":"lab1_v1.4-was-automation-tgf/#the-lab-environment","text":"Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"The lab environment"},{"location":"lab1_v1.5-was-automation-tgf/","text":"Strengthen Operational Security with IBM WebSphere Automation Author(s): Tien-Thanh Le, Ajay Apte, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: July 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich Introduction to WebSphere Automation IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume. Business Context You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team. Accessing and starting the environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window. Receiving vulnerability notifications Accessing the WebSphere Automation UI A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation. Getting configuration parameters Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation. Configuring Liberty Server v20.0.0.12 In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter \" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server 4. Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, navigate to the Servers tab, to view the list of registered servers. The new Liberty server should be registered a. Confirm that the Liberty server is registered in the WebSphere Automation Application runtimes page, as illustrated below. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Configuring Liberty Server v20.0.0.9 In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Infromation: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. Configuring traditional WebSphere (tWAS) v9.0.5.6 In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Servers dashboard, and confirm that the tWAS v9.0.5.6 server was registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability. Configuring traditional WebSphere (tWAS) v9.0.5.7 In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability. Update Liberty server v20.0.0.9 to fix the vulnerability In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability. Updating configurations Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration. Resolve the issue By Applying an IFix However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Update tWAS server v9.0.5.7 to fix the vulnerability In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes. Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server: Summary Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation . Appendix 1: Reserve an environment for the lab IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button. The lab environment Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1_v1.5-was-automation-tgf/#strengthen-operational-security-with-ibm-websphere-automation","text":"Author(s): Tien-Thanh Le, Ajay Apte, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: July 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1_v1.5-was-automation-tgf/#introduction-to-websphere-automation","text":"IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.","title":"Introduction to WebSphere Automation"},{"location":"lab1_v1.5-was-automation-tgf/#business-context","text":"You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.","title":"Business Context"},{"location":"lab1_v1.5-was-automation-tgf/#accessing-and-starting-the-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.","title":"Accessing and starting the environment"},{"location":"lab1_v1.5-was-automation-tgf/#receiving-vulnerability-notifications","text":"","title":"Receiving vulnerability notifications"},{"location":"lab1_v1.5-was-automation-tgf/#accessing-the-websphere-automation-ui","text":"A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications abouts CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation.","title":"Accessing the WebSphere Automation UI"},{"location":"lab1_v1.5-was-automation-tgf/#getting-configuration-parameters","text":"Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation.","title":"Getting configuration parameters"},{"location":"lab1_v1.5-was-automation-tgf/#configuring-liberty-server-v200012","text":"In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter \" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server 4. Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, navigate to the Servers tab, to view the list of registered servers. The new Liberty server should be registered a. Confirm that the Liberty server is registered in the WebSphere Automation Application runtimes page, as illustrated below. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated.","title":"Configuring Liberty Server v20.0.0.12"},{"location":"lab1_v1.5-was-automation-tgf/#configuring-liberty-server-v20009","text":"In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Infromation: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work.","title":"Configuring Liberty Server v20.0.0.9"},{"location":"lab1_v1.5-was-automation-tgf/#configuring-traditional-websphere-twas-v9056","text":"In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Pythin script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Servers dashboard, and confirm that the tWAS v9.0.5.6 server was registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.6"},{"location":"lab1_v1.5-was-automation-tgf/#configuring-traditional-websphere-twas-v9057","text":"In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.7"},{"location":"lab1_v1.5-was-automation-tgf/#update-liberty-server-v20009-to-fix-the-vulnerability","text":"In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.","title":"Update Liberty server v20.0.0.9 to fix the vulnerability"},{"location":"lab1_v1.5-was-automation-tgf/#updating-configurations","text":"Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration.","title":"Updating configurations"},{"location":"lab1_v1.5-was-automation-tgf/#resolve-the-issue-by-applying-an-ifix","text":"However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.","title":"Resolve the issue By Applying an IFix"},{"location":"lab1_v1.5-was-automation-tgf/#update-twas-server-v9057-to-fix-the-vulnerability","text":"In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes.","title":"Update tWAS server v9.0.5.7 to fix the vulnerability"},{"location":"lab1_v1.5-was-automation-tgf/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","text":"You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)"},{"location":"lab1_v1.5-was-automation-tgf/#summary","text":"Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Summary"},{"location":"lab1_v1.5-was-automation-tgf/#appendix-1-reserve-an-environment-for-the-lab","text":"IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button.","title":"Appendix 1: Reserve an environment for the lab"},{"location":"lab1_v1.5-was-automation-tgf/#the-lab-environment","text":"Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"The lab environment"},{"location":"lab1_v1.6-was-automation-tgf/","text":"Strengthen Operational Security with IBM WebSphere Automation Author(s): Tien-Thanh Le, Ajay Reddy, Brian Hanczaryk, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: July 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich Introduction to WebSphere Automation IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume. Business Context You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team. Accessing and starting the environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window. Receiving vulnerability notifications Accessing the WebSphere Automation UI A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation. Getting configuration parameters Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation. Configuring Liberty Server v20.0.0.12 In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter \" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server 4. Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, navigate to the Servers tab, to view the list of registered servers. The new Liberty server should be registered a. Confirm that the Liberty server is registered in the WebSphere Automation Application runtimes page, as illustrated below. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Configuring Liberty Server v20.0.0.9 In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. Configuring traditional WebSphere (tWAS) v9.0.5.6 In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Servers dashboard, and confirm that the tWAS v9.0.5.6 server was registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability. Configuring traditional WebSphere (tWAS) v9.0.5.7 In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability. Update Liberty server v20.0.0.9 to fix the vulnerability In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability. Updating configurations Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration. Resolve the issue By Applying an iFix However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server. Update tWAS server v9.0.5.7 to fix the vulnerability In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes. Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional) You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server: Summary Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation . Appendix 1: Reserve an environment for the lab IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button. The lab environment Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1_v1.6-was-automation-tgf/#strengthen-operational-security-with-ibm-websphere-automation","text":"Author(s): Tien-Thanh Le, Ajay Reddy, Brian Hanczaryk, Jagadeeswar R Gangaraju, Yee-Kang Chang, Rafael Osorio Last updated: July 2021 Duration: 45 mins Need support? Contact Rafael Osorio and Kevin Postreich","title":"Strengthen Operational Security with IBM WebSphere Automation"},{"location":"lab1_v1.6-was-automation-tgf/#introduction-to-websphere-automation","text":"IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents. It removes manual toil so that your team can spend more time innovating while minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments. In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI. WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure. Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur. Augment the operational experience with access to simplified and consolidated information that enables teams to act. With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth. IBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak\u00ae for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance. Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.","title":"Introduction to WebSphere Automation"},{"location":"lab1_v1.6-was-automation-tgf/#business-context","text":"You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below. Today (as-is): IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin. You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions. Generally, WAS inventory is maintained in spreadsheets. Based on that, you check if this CVE applies to your managed inventory (Spreadsheet) You determine if an APAR / Fix Pack upgrade should be applied to existing environment You deploy the fix to the impacted environments You update the WAS inventory (Spreadsheet) and provide up-to-date reports to audit and compliance teams As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help! You would like to have: Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs). Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers. Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team. Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication. In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance. At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.","title":"Business Context"},{"location":"lab1_v1.6-was-automation-tgf/#accessing-and-starting-the-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 TIP: If you need additional details, the step by step instructions for reserving an environment can be found in APPENDIX 1 of this lab guide. When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen: WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs. If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize. You will be working on the STUDENT VM only. All the WebSphere images and iFixes required for the lab are pre-installed: /opt/IBM/WebSphere/Liberty200012/ /opt/IBM/WebSphere/Liberty20009/ /opt/IBM/WebSphere/AppServer9057/ /opt/IBM/WebSphere/AppServer9056/ Click the screen representing the STUDENT VM Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm! You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.","title":"Accessing and starting the environment"},{"location":"lab1_v1.6-was-automation-tgf/#receiving-vulnerability-notifications","text":"","title":"Receiving vulnerability notifications"},{"location":"lab1_v1.6-was-automation-tgf/#accessing-the-websphere-automation-ui","text":"A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage. For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment. On the Student VM , open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar): Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \" 502 Gateway Error \" accessing the WebSphere Automation URL, please wait a few minutes and retry. https://cpd-websphere-automation.apps.ocp.ibm.edu On the login page, select the OpenShift authentication as the authentication type. Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. Note: If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access. Enter ocadmin as username and ibmocp46 as password. And click Log In . The IBM Automation Welcome page appears. On the Welcome page, open the Menu , click Operate , and then click Application runtimes . Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation. The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet. Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs. a. Open the Notification configuration tab. The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. a. Click Add email address (1) b. Enter your email and click Save (2). Great! Your email is configured to receive security notifications. In the next section, you will register servers to WebSphere Automation.","title":"Accessing the WebSphere Automation UI"},{"location":"lab1_v1.6-was-automation-tgf/#getting-configuration-parameters","text":"Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details: URL : The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities. API Key : The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Usage metering certificate : The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service. In this section, you will get these configuration parameters. Let\u2019s start it! Return to the desktop and open a new terminal window. Log in as root user su root a. Enter the following password when prompted Note: The first character in the password is numeric One (1) 1bm2021rhjb Next, log in to the OCP Cluster using the command below: oc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443 Make sure that the project you are working on is websphere-automation : oc project websphere-automation Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file \u201c/opt/IBM/WebSphere/metering-url.txt\u201d echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt View the contents of the saved file to ensure the URL was captured. cat /opt/IBM/WebSphere/metering-url.txt Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d oc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/api-key.txt Finally, get the Server certificate that is used for SSL handshake between the servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem View the contents of the saved file to ensure the api-key (token) was captured. cat /opt/IBM/WebSphere/cacert.pem Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation. In the next section, you register your first server in WebSphere Automation.","title":"Getting configuration parameters"},{"location":"lab1_v1.6-was-automation-tgf/#configuring-liberty-server-v200012","text":"In this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it. Create a new Liberty server, version 20.0.0.12, using the command below: /opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file: cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml a. If promted to overwite the file, enter \" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server 4. Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection: The command below will import the \u201c cacert.pem \u201d file, that you saved in a previous step, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation. keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Configure the usage metering in the new server. This is configured in the Liberty server.xml file. a. Open the server.xml file using the \u201cgedit\u201d editor gedit /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml b. Add the usageMetering-1.0 feature to the existing features in the <featureManager> element, as illustrated below: <feature>usageMetering-1.0</feature> c. In the server.xml file, add the usageMetering element below: <usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/> Save and Close the server.xml file. Create a bootstrap.properties file for the Liberty server that contains the variable values for metering_url and api_key that are defined in the server.xml file echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties echo \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" >> /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables cat /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/bootstrap.properties The metering-url and api-key variables should have values as illustrated below. Restart the Liberty server so that it can be initialized with the bootstrap.properties file. Note: Use the --clean option when starting the Liberty server, to clear any cached data. /opt/IBM/WebSphere/Liberty200012/bin/server stop Liberty_200012_server /opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server --clean View the Liberty server \u201c messages.log \u201d file and find the message indicating that the server was registered to the metering service. tail /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/logs/messages.log In the WebSphere Automation UI, navigate to the Servers tab, to view the list of registered servers. The new Liberty server should be registered a. Confirm that the Liberty server is registered in the WebSphere Automation Application runtimes page, as illustrated below. IMPORTANT: If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly. 1. Review the server.xml configuration. - Ensure the usageMetering-1.0 feature is included in the list of features. 2. Review the bootstrap.properties file - Ensure the usageMetering url is CORRECT. No additional characters or spaces. - Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated.","title":"Configuring Liberty Server v20.0.0.12"},{"location":"lab1_v1.6-was-automation-tgf/#configuring-liberty-server-v20009","text":"In this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify the lab, we have pre-created the configuration files to make the configuration simpler. Return to the Terminal window where you are logged in as \u201c root \u201d. Tip: You can run the \u201c whoami \u201d command in the terminal window to determine the currently logged in user. First, you need to create the Liberty server version 20.0.0.9, using the command below: /opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. a. Copy the tls configuration that we provided, to the new Liberty server configuration. cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml b. If promted to overwite the file, enter\" y \" for yes. Start the Liberty server: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty\\_20009\\_server Update the DefaultKeyStore with the server certificate to trust the server for https connections: keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt Copy the server.xml that contains the usageMetering feature and properties (url, api-key): cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml a. If promted to overwite the file, enter\" y \" for yes. Back to the WebSphere Automation dashboard, confirm that the 2 nd Liberty server is registered. The dashboard shows that this server is vulnerable for some CVEs Click on the \u201c +1 more \u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693. Note that the +1 could be different if additional CVEs have been discovered since the time of this writing. a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693 b. Check your email that you registered with IBM automation. A mail notification was sent indicating the vulnerability. Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work.","title":"Configuring Liberty Server v20.0.0.9"},{"location":"lab1_v1.6-was-automation-tgf/#configuring-traditional-websphere-twas-v9056","text":"In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service. First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.6 server. Return to the terminal window and execute the command below: /opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server Configure usage-metering using the wsadmin script below: The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters. /opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword The script should run successfully as illustrated below. Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. Go back to the browser, navigate to the Servers dashboard, and confirm that the tWAS v9.0.5.6 server was registered. You should see that this server is vulnerable to 14 or more CVEs. TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. Check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.6"},{"location":"lab1_v1.6-was-automation-tgf/#configuring-traditional-websphere-twas-v9057","text":"In this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section. First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Again, you need to configure the usage-metering. /opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword Great, your second traditional WAS server is configured. Check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered. You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than illustrated above, since new vulnerabilities are constantly discovered. Again, check your email. A mail notification was sent showing the vulnerability.","title":"Configuring traditional WebSphere (tWAS) v9.0.5.7"},{"location":"lab1_v1.6-was-automation-tgf/#update-liberty-server-v20009-to-fix-the-vulnerability","text":"In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.","title":"Update Liberty server v20.0.0.9 to fix the vulnerability"},{"location":"lab1_v1.6-was-automation-tgf/#updating-configurations","text":"Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info. We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE. Edit the server.xml, using the command below: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Comment out the beanValidation-2.0 feature: <!-- <feature>beanValidation-2.0</feature> --> Save and close the server.xml file. Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically. Great, you removed the vulnerability by updating the configuration.","title":"Updating configurations"},{"location":"lab1_v1.6-was-automation-tgf/#resolve-the-issue-by-applying-an-ifix","text":"However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. First, add back the beanValidation feature: gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml Uncomment the beanValidation-2.0 feature: <feature>beanValidation-2.0</feature> Save and Close the server.xml file. Back to the browser, make sure the vulnerability shows up again. You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server. /opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server Now, apply the iFix, by running the following command. Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM. /iFix/PH29942/imcl_ifix_install.sh 20009 Great, the iFix was applied. Now, start the server again: /opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.","title":"Resolve the issue By Applying an iFix"},{"location":"lab1_v1.6-was-automation-tgf/#update-twas-server-v9057-to-fix-the-vulnerability","text":"In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the CVE-2021-26296 vulnerability. Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296. Now, you will fix it by applying the appropriate iFix. First, stop the server, wait until it has stopped: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Run the following script to install the iFix: /iFix/PH34711/imcl_ifix_install.sh 9057 Start the server once the iFix installation has completed: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7 . Also, you can see on the right under \u201cApplied iFixes\u201d there are 4 applied fixes.","title":"Update tWAS server v9.0.5.7 to fix the vulnerability"},{"location":"lab1_v1.6-was-automation-tgf/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","text":"You can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list Stop the server: /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server Uninstall the iFix: /iFix/PH34711/imcl_ifix_uninstall.sh 9057 Start the server: /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)"},{"location":"lab1_v1.6-was-automation-tgf/#summary","text":"Congratulations! You have completed the WebSphere Automation lab. With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents. IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments. IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first. To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation .","title":"Summary"},{"location":"lab1_v1.6-was-automation-tgf/#appendix-1-reserve-an-environment-for-the-lab","text":"IMPORTANT: Reserving an environment ONLY applies if you are performing this lab as self-paced outside of an instructor led virtual lab. A Skytap cloud lab environment is required for performing the lab. In self-paced mode , you are required to request an environment using the instructions provided below. Otherwise, in an instructor led lab, the lab instructor will provide access to pre-provisioned lab environment. Use the link below to access the WebSphere Foundation Bootcamp https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c WebSphere Automation Environment \u2013 Skytap \u201d b. Purpose : Practice / Self-Education c. Description : Enter a description. The field is required. d. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) e. Select a time : Select a time of day for reservation to expire f. Select a timezone nearest to you Preferred Geography: Choose a Skytap datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Take not of the Username and Password . Then click the icon to navigate to the Launch page. Click the \u201c Open Your Skytap Environment \u201d link. Enter the Desktop Password for the VM access, that was generated for your environment. Click Submit button.","title":"Appendix 1: Reserve an environment for the lab"},{"location":"lab1_v1.6-was-automation-tgf/#the-lab-environment","text":"Eight Linux VM has been provided for this lab. Note: The STUDENT VM is the VM you will login to and use in the lab. The login credentials for the STUDENT\u201d image is: User ID: ibmuser Password: engageibm!","title":"The lab environment"},{"location":"resources/","text":"IBM WebSphere Automation Resources Documentation Official Documentation Blog: Announcing IBM WebSphere Automation Expert TV","title":"IBM WebSphere Automation Resources"},{"location":"resources/#ibm-websphere-automation-resources","text":"","title":"IBM WebSphere Automation Resources"},{"location":"resources/#documentation","text":"Official Documentation Blog: Announcing IBM WebSphere Automation","title":"Documentation"},{"location":"resources/#expert-tv","text":"","title":"Expert TV"}]}